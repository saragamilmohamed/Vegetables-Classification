{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2965251,"sourceType":"datasetVersion","datasetId":1817999},{"sourceId":4737304,"sourceType":"datasetVersion","datasetId":2741401}],"dockerImageVersionId":30302,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/saragamilmohamed/vegetables-classification?scriptVersionId=114086427\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"**Libraries**","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\nimport glob as gb\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras .layers import Dense,Activation,MaxPooling2D,Conv2D,Flatten,Dropout","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:34:43.585057Z","iopub.execute_input":"2022-12-17T17:34:43.585527Z","iopub.status.idle":"2022-12-17T17:34:49.416533Z","shell.execute_reply.started":"2022-12-17T17:34:43.585443Z","shell.execute_reply":"2022-12-17T17:34:49.415495Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Train Data**","metadata":{}},{"cell_type":"code","source":"trainPath=r\"/kaggle/input/vegetable-image-dataset/Vegetable Images/train\"","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:34:49.421043Z","iopub.execute_input":"2022-12-17T17:34:49.421564Z","iopub.status.idle":"2022-12-17T17:34:49.43132Z","shell.execute_reply.started":"2022-12-17T17:34:49.421534Z","shell.execute_reply":"2022-12-17T17:34:49.429274Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for folder in  os.listdir(trainPath ) : \n    files = gb.glob(pathname= str( trainPath +'/' + folder + '/*.jpg'))\n    print(f'For training data , found {len(files)} in folder {folder}')","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:34:49.435543Z","iopub.execute_input":"2022-12-17T17:34:49.437727Z","iopub.status.idle":"2022-12-17T17:34:52.794095Z","shell.execute_reply.started":"2022-12-17T17:34:49.437696Z","shell.execute_reply":"2022-12-17T17:34:52.793001Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"size=[]\nfor folder in  os.listdir(trainPath ) : \n    files = gb.glob(pathname= str( trainPath +'/' + folder + '/*.jpg'))\n    for file in files:\n        img=cv2.imread(file)\n        size.append(img.shape)\npd.Series(size).value_counts()        ","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:34:52.795648Z","iopub.execute_input":"2022-12-17T17:34:52.796046Z","iopub.status.idle":"2022-12-17T17:36:02.882848Z","shell.execute_reply.started":"2022-12-17T17:34:52.796007Z","shell.execute_reply":"2022-12-17T17:36:02.881968Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"code={}\nfor num , folder in enumerate(os.listdir(trainPath)):\n    code.update({folder:num}) \n\ndef getcode(n) : \n    for x , y in code.items() : \n        if n == y : \n            return x \n\nprint(code)","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:02.885888Z","iopub.execute_input":"2022-12-17T17:36:02.886232Z","iopub.status.idle":"2022-12-17T17:36:02.893645Z","shell.execute_reply.started":"2022-12-17T17:36:02.886205Z","shell.execute_reply":"2022-12-17T17:36:02.892674Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"s=100\nX_train = []\ny_train = []\nfor folder in  os.listdir(trainPath ) : \n    files = gb.glob(pathname= str( trainPath +'/' + folder + '/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image=cv2.cvtColor(image, cv2.COLOR_BGR2RGB )\n        image_array = cv2.resize(image , (s,s))\n        X_train.append(list(image_array))\n        y_train.append(code[folder])\n","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:02.895259Z","iopub.execute_input":"2022-12-17T17:36:02.896357Z","iopub.status.idle":"2022-12-17T17:36:27.732874Z","shell.execute_reply.started":"2022-12-17T17:36:02.896322Z","shell.execute_reply":"2022-12-17T17:36:27.731926Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_train),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_train[i])   \n    plt.axis('off')\n    plt.title(getcode(y_train[i]))","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:27.736133Z","iopub.execute_input":"2022-12-17T17:36:27.736466Z","iopub.status.idle":"2022-12-17T17:36:29.831397Z","shell.execute_reply.started":"2022-12-17T17:36:27.736437Z","shell.execute_reply":"2022-12-17T17:36:29.830158Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Test Data**","metadata":{}},{"cell_type":"code","source":"testPath=r\"/kaggle/input/vegetable-image-dataset/Vegetable Images/test\"","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:29.832773Z","iopub.execute_input":"2022-12-17T17:36:29.833162Z","iopub.status.idle":"2022-12-17T17:36:29.837814Z","shell.execute_reply.started":"2022-12-17T17:36:29.833115Z","shell.execute_reply":"2022-12-17T17:36:29.836863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for folder in  os.listdir(testPath ) : \n    files = gb.glob(pathname= str( testPath +'/' + folder + '/*.jpg'))\n    print(f'For training data , found {len(files)} in folder {folder}')","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:29.839227Z","iopub.execute_input":"2022-12-17T17:36:29.839838Z","iopub.status.idle":"2022-12-17T17:36:30.474682Z","shell.execute_reply.started":"2022-12-17T17:36:29.839805Z","shell.execute_reply":"2022-12-17T17:36:30.473728Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"size=[]\nfor folder in  os.listdir(testPath ) : \n    files = gb.glob(pathname= str( testPath +'/' + folder + '/*.jpg'))\n    for file in files:\n        img=cv2.imread(file)\n        size.append(img.shape)\npd.Series(size).value_counts()    ","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:30.476229Z","iopub.execute_input":"2022-12-17T17:36:30.476805Z","iopub.status.idle":"2022-12-17T17:36:44.451473Z","shell.execute_reply.started":"2022-12-17T17:36:30.476762Z","shell.execute_reply":"2022-12-17T17:36:44.449035Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"code={}\nfor num , folder in enumerate(os.listdir(testPath)):\n    code.update({folder:num}) \n\ndef getcode(n) : \n    for x , y in code.items(): \n        if n == y : \n            return x \n\nprint(code)","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:44.455548Z","iopub.execute_input":"2022-12-17T17:36:44.457681Z","iopub.status.idle":"2022-12-17T17:36:44.467458Z","shell.execute_reply.started":"2022-12-17T17:36:44.457641Z","shell.execute_reply":"2022-12-17T17:36:44.466581Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test = []\ny_test = []\nfor folder in  os.listdir(testPath ) : \n    files = gb.glob(pathname= str( testPath +'/' + folder + '/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image=cv2.cvtColor(image, cv2.COLOR_BGR2RGB )\n        image_array = cv2.resize(image , (s,s))\n        X_test.append(list(image_array))\n        y_test.append(code[folder])","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:44.47186Z","iopub.execute_input":"2022-12-17T17:36:44.474147Z","iopub.status.idle":"2022-12-17T17:36:49.639903Z","shell.execute_reply.started":"2022-12-17T17:36:44.474113Z","shell.execute_reply":"2022-12-17T17:36:49.638809Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_test),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_test[i])   \n    plt.axis('off')\n    plt.title(getcode(y_test[i]))","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:49.641621Z","iopub.execute_input":"2022-12-17T17:36:49.642018Z","iopub.status.idle":"2022-12-17T17:36:51.938072Z","shell.execute_reply.started":"2022-12-17T17:36:49.641977Z","shell.execute_reply":"2022-12-17T17:36:51.937008Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Valid Data**","metadata":{}},{"cell_type":"code","source":"validPath=r\"/kaggle/input/vegetable-image-dataset/Vegetable Images/validation\"","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:51.94219Z","iopub.execute_input":"2022-12-17T17:36:51.943077Z","iopub.status.idle":"2022-12-17T17:36:51.947335Z","shell.execute_reply.started":"2022-12-17T17:36:51.943039Z","shell.execute_reply":"2022-12-17T17:36:51.946373Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for folder in  os.listdir(validPath ) : \n    files = gb.glob(pathname= str( validPath +'/' + folder + '/*.jpg'))\n    print(f'For training data , found {len(files)} in folder {folder}')","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:51.948533Z","iopub.execute_input":"2022-12-17T17:36:51.949211Z","iopub.status.idle":"2022-12-17T17:36:52.632884Z","shell.execute_reply.started":"2022-12-17T17:36:51.949175Z","shell.execute_reply":"2022-12-17T17:36:52.631871Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nsize=[]\nfor folder in  os.listdir(validPath ) : \n    files = gb.glob(pathname= str( validPath +'/' + folder + '/*.jpg'))\n    for file in files:\n        img=cv2.imread(file)\n        size.append(img.shape)\npd.Series(size).value_counts()","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:36:52.634464Z","iopub.execute_input":"2022-12-17T17:36:52.635186Z","iopub.status.idle":"2022-12-17T17:37:06.582876Z","shell.execute_reply.started":"2022-12-17T17:36:52.635145Z","shell.execute_reply":"2022-12-17T17:37:06.581986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"code={}\nfor num , folder in enumerate(os.listdir(validPath)):\n    code.update({folder:num}) \n\ndef getcode(n) : \n    for x , y in code.items() : \n        if n == y : \n            return x \n\nprint(code)","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:06.584324Z","iopub.execute_input":"2022-12-17T17:37:06.584672Z","iopub.status.idle":"2022-12-17T17:37:06.594269Z","shell.execute_reply.started":"2022-12-17T17:37:06.584638Z","shell.execute_reply":"2022-12-17T17:37:06.593193Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_valid = []\ny_valid = []\nfor folder in  os.listdir(validPath) : \n    files = gb.glob(pathname= str( validPath +'/' + folder + '/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image=cv2.cvtColor(image, cv2.COLOR_BGR2RGB )\n        image_array = cv2.resize(image , (s,s))\n        X_valid.append(list(image_array))\n        y_valid.append(code[folder])","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:06.595861Z","iopub.execute_input":"2022-12-17T17:37:06.596449Z","iopub.status.idle":"2022-12-17T17:37:11.576514Z","shell.execute_reply.started":"2022-12-17T17:37:06.596413Z","shell.execute_reply":"2022-12-17T17:37:11.575468Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nplt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_valid),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_valid[i])   \n    plt.axis('off')\n    plt.title(getcode(y_valid[i]))","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:11.577941Z","iopub.execute_input":"2022-12-17T17:37:11.578322Z","iopub.status.idle":"2022-12-17T17:37:13.900008Z","shell.execute_reply.started":"2022-12-17T17:37:11.57828Z","shell.execute_reply":"2022-12-17T17:37:13.898893Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train = np.array(X_train)\nX_test = np.array(X_test)\nX_valid=np.array(X_valid)\ny_train = np.array(y_train)\ny_test = np.array(y_test)\ny_valid=np.array(y_valid)\nprint(f'X_train shape  is {X_train.shape}')\nprint(f'X_test shape  is {X_test.shape}')\nprint(f'X_valid shape  is {X_valid.shape}')\nprint(f'y_train shape  is {y_train.shape}')\nprint(f'y_test shape  is {y_test.shape}')\nprint(f'y_valid shape is {y_valid.shape}')","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:13.901203Z","iopub.execute_input":"2022-12-17T17:37:13.901772Z","iopub.status.idle":"2022-12-17T17:37:15.000159Z","shell.execute_reply.started":"2022-12-17T17:37:13.901733Z","shell.execute_reply":"2022-12-17T17:37:14.999096Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{"execution":{"iopub.status.busy":"2022-12-05T20:38:07.403538Z","iopub.execute_input":"2022-12-05T20:38:07.40427Z","iopub.status.idle":"2022-12-05T20:38:07.481223Z","shell.execute_reply.started":"2022-12-05T20:38:07.404233Z","shell.execute_reply":"2022-12-05T20:38:07.480076Z"}}},{"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Conv2D,Dense,Flatten,MaxPooling2D,Dropout\nmodel=Sequential()\nmodel.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=X_train.shape[1:]))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,kernel_size=(3,3),activation='relu'))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(128,kernel_size=(3,3),activation='relu'))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(512,kernel_size=(3,3),activation='relu'))\nmodel.add(MaxPooling2D())\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128,activation =\"relu\"))\nmodel.add(Dense(64,activation =\"relu\"))\nmodel.add(Dense(15, activation='softmax'))\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:15.001687Z","iopub.execute_input":"2022-12-17T17:37:15.002303Z","iopub.status.idle":"2022-12-17T17:37:18.005051Z","shell.execute_reply.started":"2022-12-17T17:37:15.002265Z","shell.execute_reply":"2022-12-17T17:37:18.004081Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:18.006326Z","iopub.execute_input":"2022-12-17T17:37:18.007118Z","iopub.status.idle":"2022-12-17T17:37:18.019769Z","shell.execute_reply.started":"2022-12-17T17:37:18.00708Z","shell.execute_reply":"2022-12-17T17:37:18.018863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nfrom keras.callbacks import ReduceLROnPlateau,EarlyStopping","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:18.021134Z","iopub.execute_input":"2022-12-17T17:37:18.021565Z","iopub.status.idle":"2022-12-17T17:37:18.029257Z","shell.execute_reply.started":"2022-12-17T17:37:18.021528Z","shell.execute_reply":"2022-12-17T17:37:18.028285Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=2, \n                                            factor=0.5, \n                                            min_lr=0.00001)","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:18.03078Z","iopub.execute_input":"2022-12-17T17:37:18.031148Z","iopub.status.idle":"2022-12-17T17:37:18.039712Z","shell.execute_reply.started":"2022-12-17T17:37:18.031106Z","shell.execute_reply":"2022-12-17T17:37:18.038661Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"earlystop = EarlyStopping(patience=5)","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:18.041163Z","iopub.execute_input":"2022-12-17T17:37:18.041762Z","iopub.status.idle":"2022-12-17T17:37:18.054816Z","shell.execute_reply.started":"2022-12-17T17:37:18.041726Z","shell.execute_reply":"2022-12-17T17:37:18.053739Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(X_train,y_train, batch_size=64,\n                              epochs = 20, validation_data = (X_valid,y_valid),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] // 64\n                              , callbacks=[earlystop,learning_rate_reduction])","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:18.05653Z","iopub.execute_input":"2022-12-17T17:37:18.057289Z","iopub.status.idle":"2022-12-17T17:37:57.893485Z","shell.execute_reply.started":"2022-12-17T17:37:18.057254Z","shell.execute_reply":"2022-12-17T17:37:57.892495Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"val_Loss, val_Accuracy = model.evaluate(X_test, y_test)\n\nprint('Test Loss is '+str(val_Loss))\nprint('Test Accuracy is '+str(val_Accuracy ))","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:57.894972Z","iopub.execute_input":"2022-12-17T17:37:57.895307Z","iopub.status.idle":"2022-12-17T17:37:58.744001Z","shell.execute_reply.started":"2022-12-17T17:37:57.895272Z","shell.execute_reply":"2022-12-17T17:37:58.743094Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred =model.predict(X_test)\n\nprint('Prediction Shape is {}'.format(y_pred.shape))","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:58.745858Z","iopub.execute_input":"2022-12-17T17:37:58.746837Z","iopub.status.idle":"2022-12-17T17:37:59.214895Z","shell.execute_reply.started":"2022-12-17T17:37:58.746798Z","shell.execute_reply":"2022-12-17T17:37:59.213982Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_test),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_test[i])    \n    plt.axis('off')\n    plt.title(getcode(np.argmax(y_pred[i])))","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:37:59.216297Z","iopub.execute_input":"2022-12-17T17:37:59.216675Z","iopub.status.idle":"2022-12-17T17:38:01.226162Z","shell.execute_reply.started":"2022-12-17T17:37:59.216637Z","shell.execute_reply":"2022-12-17T17:38:01.2252Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend(['train','valid'],loc='lower right')\nplt.tight_layout()","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:38:01.22767Z","iopub.execute_input":"2022-12-17T17:38:01.228285Z","iopub.status.idle":"2022-12-17T17:38:01.505992Z","shell.execute_reply.started":"2022-12-17T17:38:01.228242Z","shell.execute_reply":"2022-12-17T17:38:01.505104Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 8))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, 20, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, 20, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2022-12-17T17:38:01.50742Z","iopub.execute_input":"2022-12-17T17:38:01.508039Z","iopub.status.idle":"2022-12-17T17:38:02.157076Z","shell.execute_reply.started":"2022-12-17T17:38:01.508001Z","shell.execute_reply":"2022-12-17T17:38:02.156133Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"img=cv2.imread(r'/kaggle/input/capsicums/FreshGreenRedYellowOrangeBellCapsicum.jpg')\nimg=cv2.cvtColor(img, cv2.COLOR_BGR2RGB )\nimg_arr=cv2.resize(img , (100,100))\nimg_arr=np.array(img_arr)\nplt.imshow(img_arr)\nimg_arr = np.expand_dims(img_arr,axis=0)\nprint(img_arr.shape)\ny_pred=model.predict(img_arr)\n\n\nplt.title(getcode(np.argmax(y_pred)))","metadata":{"execution":{"iopub.status.busy":"2022-12-17T20:36:02.563196Z","iopub.execute_input":"2022-12-17T20:36:02.563573Z","iopub.status.idle":"2022-12-17T20:36:02.844355Z","shell.execute_reply.started":"2022-12-17T20:36:02.563538Z","shell.execute_reply":"2022-12-17T20:36:02.843536Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}